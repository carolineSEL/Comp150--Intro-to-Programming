#BlueJ class context
comment0.target=TextAnalyzer
comment0.text=\r\n\ \ Lab\ 5\:\ Refactoring\ the\ Textual\ Analysis\ Project.\r\n\r\n\ \ Analyzes\ the\ text\ from\ a\ given\ file.\r\n\r\n\ \ This\ program\ counts\ the\ number\ of\ lines,\ number\ of\ words\ in\ a\ line,\ \r\n\ \ number\ of\ characters\ in\ a\ word,\ and\ most\ frequent\ words\ along\ with\ their\ frequency..\r\n\r\n\ \ @author\ Caroline\ Lamb\r\n\ \ @author\ [your\ partner's\ name]\r\n\ \ @author\ [with\ assistance\ from\ ...\ (including\ instructor/TAs)]\r\n\ \ @author\ [working\ side-by-side\ with\ ...]\r\n\ \ @version\ 7/24/2021\r\n
comment1.params=filename
comment1.target=TextAnalyzer(java.lang.String)
comment1.text=\r\n\ Constructs\ a\ new\ object\ of\ this\ class.\r\n\ \ \ \ \ \ @param\ \ \ String\ \ \ takes\ the\ name\ of\ file\ to\ be\ read\ \r\n
comment10.params=numLines\ numCharacters\ baseword\ characterName\ numWords
comment10.target=void\ analyzeBook(int,\ int,\ java.lang.String,\ java.lang.String,\ int)
comment10.text=\r\n\ Analyzes\ file\ passed\ to\ the\ reader\ using\ all\ methods\ of\ the\ TextAnalyzer\r\n\ class.\ \r\n\ \ \ \ \ \r\n\ \ \ \ \ \ @param\ \ numLines\:\ \ \ \ \ \ \ takes\ the\ number\ of\ lines\ to\ read\ through\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ numCharacters\:\ \ takes\ the\ minimum\ number\ of\ characters\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ desired\ for\ a\ word\ to\ be\ considered\ long.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ baseword\:\ \ \ \ \ \ \ takes\ the\ baseword\ as\ a\ parameter.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ characterName\:\ \ takes\ the\ name\ of\ the\ character\ to\ look\ for\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ as\ a\ parameter.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ numWords\:\ \ \ \ \ \ \ takes\ the\ number\ of\ frequently\ used\ words\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ to\ find\ as\ a\ parameter.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ @return\ returns\ the\ return\ of\ each\ previous\ method\ in\ the\ TextAnalysis\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ class.\ \r\n
comment2.params=
comment2.target=void\ processLine()
comment2.text=\r\n\ Reads\ and\ processes\ a\ line\ from\ the\ text.\r\n\ \ \r\n\ \ \ \ \ \ @return\ returns\ the\ length\ of\ the\ line\ and\ number\ of\ words\ in\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ line.\ \r\n
comment3.params=numLines
comment3.target=void\ skipLines(int)
comment3.text=\r\n\ Skips\ through\ the\ given\ number\ of\ lines\ in\ the\ file.\ \r\n\ \r\n\ \ \ \ \ \ @param\ \ Takes\ number\ of\ lines\ to\ skip\ through\ as\ a\ parameter.\ \ \r\n
comment4.params=numLines
comment4.target=void\ getAverages(int)
comment4.text=\r\n\ Calculates\ the\ average\ number\ of\ words\ per\ line\ and\ the\ average\ length\r\n\ of\ words\ in\ the\ text.\ \r\n\ \r\n\ \ \ \ \ \ @param\ \ takes\ the\ number\ of\ lines\ to\ get\ averages\ from\ as\ a\ parameter.\r\n\ \ \ \ \ \ @return\ returns\ the\ average\ number\ of\ words\ per\ line\ and\ average\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ length\ of\ words\ in\ the\ given\ number\ of\ lines.\ \r\n
comment5.params=numCharacters
comment5.target=void\ wordAnalysis(int)
comment5.text=\r\n\ Analyzes\ the\ text\ for\ total\ number\ of\ lines\ and\ words\ in\ the\ file,\r\n\ the\ number\ of\ distinct\ words,\ the\ number\ of\ words\ used\ only\ once,\ and\ \r\n\ the\ number\ of\ long\ words.\ \r\n\ \r\n\ \ \ \ \ \ @param\ \ takes\ the\ minimum\ number\ of\ characters\ desired\ for\ a\ word\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ to\ be\ considered\ long.\ \r\n\ \ \ \ \ \ @return\ returns\ the\ total\ number\ of\ lines\ and\ words\ in\ the\ file,\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ number\ of\ distinct\ words,\ number\ of\ long\ words\ and\ a\ list\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ those\ words,\ and\ number\ of\ words\ that\ occur\ only\ once\ in\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ text.\ \r\n
comment6.params=baseword
comment6.target=void\ analyzeBaseWord(java.lang.String)
comment6.text=\r\n\ Analyzes\ text\ for\ words\ that\ contain\ the\ baseword\ in\ them.\r\n\ \r\n\ \r\n\ \ \ \ \ \ @param\ \ takes\ the\ baseword\ as\ a\ parameter.\r\n\ \ \ \ \ \ @return\ returns\ list\ of\ words\ containing\ the\ baseword\ and\ the\r\n\ \ \ \ \ \ number\ of\ times\ they\ occur\ in\ the\ text.\ \r\n
comment7.params=characterName
comment7.target=void\ measureCharacterImportance(java.lang.String)
comment7.text=\r\n\ Analyzes\ the\ text\ for\ the\ number\ of\ times\ a\ given\ character\ is\ mentioned.\ \r\n\ \r\n\ \ \ \ \ \ @param\ \ takes\ the\ name\ of\ the\ character\ to\ look\ for\ as\ a\ parameter.\r\n\ \ \ \ \ \ @return\ returns\ the\ number\ of\ times\ the\ character\ is\ mentioned\ in\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ text.\ \r\n
comment8.params=
comment8.target=void\ mostFrequentWord()
comment8.text=\r\n\ Finds\ the\ most\ frequently\ used\ word\ in\ the\ text.\r\n\r\n\ \ \ \ \ \ @return\ returns\ the\ most\ frequently\ used\ word\ and\ the\ number\ of\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ times\ it\ occurs\ in\ the\ text.\ \r\n
comment9.params=numWords
comment9.target=void\ mostFrequentWords(int)
comment9.text=\r\n\ Finds\ multiple\ frequently\ used\ words\ and\ prints\ them.\ \r\n\ \r\n\ \ \ \ \ \ @param\ \ takes\ the\ number\ of\ frequently\ used\ words\ to\ find\ as\ a\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ parameter.\ \r\n\ \ \ \ \ \ @return\ returns\ a\ list\ of\ the\ most\ frequently\ used\ words\ and\ the\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ number\ of\ times\ they\ are\ used\ in\ the\ text.\ \r\n
numComments=11
